generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PAID
  UNPAID
}

model User {
  id                      String       @id
  email                   String       @unique
  name                    String?
  stripeCustomerId        String?      @unique
  stripeAccountId         String?      @unique
  subscriptionPlan        String?
  subscriptionStatus      String?
  plan                    String       @default("free") // free, starter, pro, business
  businessName            String?
  businessSlug            String?      @unique
  address                 String?
  description             String?
  logo                    String?
  logoUrl                 String?
  phone                   String?
  vatNumber               String?
  certificate             String?
  payoutFrequency         String?      @default("weekly")
  lastPayoutDate          DateTime?
  totalEarnings           Float        @default(0)
  profileCompleted        Boolean      @default(false)
  servicesAdded           Boolean      @default(false)
  scheduleConfigured      Boolean      @default(false)
  teamInvited             Boolean      @default(false)
  bookingsReceived        Boolean      @default(false)
  onboardingCompleteShown Boolean      @default(false)
  notificationsEmail      Boolean      @default(true)
  notificationsWhatsApp   Boolean      @default(false)
  emailRemindersEnabled   Boolean      @default(true)
  smsCredits              Int          @default(0)
  smsCreditsUsed          Int          @default(0)
  smsCreditsRenewDate     DateTime?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  businessId              String?
  locationId              String?
  bookings                Booking[]
  clients                 Client[]
  services                Service[]
  teamMembers             TeamMember[] @relation("TeamOwner")
  memberOf                TeamMember[] @relation("TeamMember")
  ownedLocations          Location[]   @relation("LocationOwner")
  assignedLocation        Location?    @relation("LocationStaff", fields: [locationId], references: [id])
  customRoles             CustomRole[]
  smsLogs                 SmsLog[]
}

model Client {
  id            String          @id @default(cuid())
  userId        String
  name          String
  email         String
  phone         String?
  birthday      DateTime?
  notes         String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  loyaltyPoints LoyaltyPoints[]
  campaignLogs  CampaignLog[]

  @@index([userId])
}

model StripeProduct {
  id            String   @id @default(cuid())
  planName      String // "pro" or "business"
  billingPeriod String // "monthly" or "yearly"
  productId     String // Stripe product ID
  priceId       String   @unique // Stripe price ID
  amount        Float // Amount in GBP
  currency      String   @default("gbp")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([planName, billingPeriod])
}

model Service {
  id          String         @id @default(cuid())
  userId      String
  name        String
  description String?        @db.Text
  duration    Int
  price       Float
  category    String?
  active      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bookings    Booking[]
  addons      ServiceAddon[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ServiceAddon {
  id          String   @id @default(cuid())
  serviceId   String
  name        String
  description String?  @db.Text
  extraTime   Int
  extraPrice  Float
  createdAt   DateTime @default(now())
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  clientId        String
  serviceId       String
  locationId      String?
  staffId         String?
  startTime       DateTime
  endTime         DateTime
  status          String        @default("pending") // pending, confirmed, completed, cancelled
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentLink     String?
  paymentIntentId String?
  stripeSessionId String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service         Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices        Invoice[]

  @@index([userId])
  @@index([clientId])
  @@index([serviceId])
  @@index([locationId])
  @@index([staffId])
  @@index([startTime])
  @@index([status])
}

model Invoice {
  id            String   @id @default(cuid())
  bookingId     String
  invoiceNumber String   @unique @default(cuid())
  amount        Float
  pdfUrl        String?
  createdAt     DateTime @default(now())
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model LoyaltyPoints {
  id          String   @id @default(cuid())
  userId      String // Salon owner
  clientId    String // Client earning points
  points      Int      @default(0)
  totalEarned Int      @default(0) // Lifetime points earned
  totalSpent  Int      @default(0) // Lifetime points redeemed
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([userId, clientId])
  @@index([userId])
  @@index([clientId])
}

model LoyaltyRedemption {
  id          String   @id @default(cuid())
  userId      String
  clientId    String
  clientName  String
  clientEmail String
  pointsUsed  Int
  description String
  bookingId   String?
  redeemedAt  DateTime @default(now())

  @@index([userId])
  @@index([clientId])
}

model LoyaltyCampaign {
  id         String    @id @default(cuid())
  userId     String
  name       String
  type       String // "welcome", "missed_you", "reward", "birthday"
  subject    String
  body       String    @db.Text
  status     String    @default("draft") // draft, active, paused
  sentCount  Int       @default(0)
  lastSentAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model TeamMember {
  id          String    @id @default(cuid())
  ownerId     String
  memberId    String?
  email       String
  name        String?
  role        String    @default("Staff")
  status      String    @default("Pending")
  permissions Json?
  inviteToken String?   @unique
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  owner       User      @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  member      User?     @relation("TeamMember", fields: [memberId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([memberId])
  @@index([inviteToken])
  @@index([status])
}

model Location {
  id           String   @id @default(cuid())
  ownerId      String
  name         String
  address      String?
  phone        String?
  manager      String?
  openingHours Json?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  owner        User     @relation("LocationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  staff        User[]   @relation("LocationStaff")

  @@index([ownerId])
  @@index([active])
}

model CustomRole {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model SmsLog {
  id          String   @id @default(cuid())
  userId      String
  clientPhone String
  clientName  String?
  message     String   @db.Text
  status      String   @default("sent") // sent, failed, pending
  provider    String   @default("twilio") // twilio, whatsapp
  cost        Int      @default(1) // Credits used
  bookingId   String?
  sentAt      DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sentAt])
}

model SmsPurchase {
  id              String   @id @default(cuid())
  userId          String
  credits         Int
  amount          Float
  currency        String   @default("gbp")
  stripePaymentId String?
  status          String   @default("completed") // completed, pending, failed
  createdAt       DateTime @default(now())

  @@index([userId])
}

model LoyaltySettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  enabled           Boolean  @default(true)
  pointsPerPound    Float    @default(1)
  bonusPerBooking   Int      @default(10)
  welcomeBonus      Int      @default(50)
  redemptionRate    Int      @default(100)
  minimumRedemption Int      @default(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model RetentionCampaign {
  id              String        @id @default(cuid())
  userId          String
  name            String
  type            String // "missed_you", "welcome", "birthday"
  subject         String
  body            String        @db.Text
  status          String        @default("draft") // draft, active, paused
  daysInactive    Int? // For "missed_you" type
  discountPercent Int? // Optional discount offer
  lastSent        DateTime?
  sentCount       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  logs            CampaignLog[]

  @@index([userId])
  @@index([status])
}

model CampaignLog {
  id         String            @id @default(cuid())
  campaignId String
  clientId   String
  status     String            @default("sent") // sent, failed, opened
  sentAt     DateTime          @default(now())
  campaign   RetentionCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  client     Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([clientId])
  @@index([sentAt])
}

model BookingPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  primaryColor    String?  @default("#E9B5D8")
  allowAddons     Boolean  @default(true)
  allowStaffPick  Boolean  @default(true)
  autoConfirm     Boolean  @default(false)
  cancellationHrs Int      @default(24)
  businessHours   Json? // {"monday": {"open": "09:00", "close": "17:00"}, ...}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
